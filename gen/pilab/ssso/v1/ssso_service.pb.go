// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: pilab/ssso/v1/ssso_service.proto

package sssov1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PasswordAuthMessage request for the password authentication.
type PasswordAuthMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username for the authentication
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password for the authentication
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PasswordAuthMessage) Reset() {
	*x = PasswordAuthMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordAuthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordAuthMessage) ProtoMessage() {}

func (x *PasswordAuthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordAuthMessage.ProtoReflect.Descriptor instead.
func (*PasswordAuthMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{0}
}

func (x *PasswordAuthMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PasswordAuthMessage) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// PasswordAuthMessage request for the password authentication.
type CodeAuthMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CodeAuthMessage) Reset() {
	*x = CodeAuthMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodeAuthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeAuthMessage) ProtoMessage() {}

func (x *CodeAuthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeAuthMessage.ProtoReflect.Descriptor instead.
func (*CodeAuthMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{1}
}

func (x *CodeAuthMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CodeAuthMessage) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// OneTimeTokenAuthMessage request for the one-time token authentication.
type OneTimeTokenAuthMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *OneTimeTokenAuthMessage) Reset() {
	*x = OneTimeTokenAuthMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneTimeTokenAuthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneTimeTokenAuthMessage) ProtoMessage() {}

func (x *OneTimeTokenAuthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneTimeTokenAuthMessage.ProtoReflect.Descriptor instead.
func (*OneTimeTokenAuthMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{2}
}

func (x *OneTimeTokenAuthMessage) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Identifies the client on the realm with tenant and client id.
type TenantClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tenant is the unique ID of the defined realm.
	// This is not generated, you can specify it.
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// ClientID is the identifier of the tenant's client.
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *TenantClientMessage) Reset() {
	*x = TenantClientMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantClientMessage) ProtoMessage() {}

func (x *TenantClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantClientMessage.ProtoReflect.Descriptor instead.
func (*TenantClientMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{3}
}

func (x *TenantClientMessage) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TenantClientMessage) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// TokenRequest request for the authentication.
type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tenant and the client. This should be always set!
	Client *TenantClientMessage `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	// Types that are assignable to Credentials:
	//
	//	*TokenRequest_PasswordAuth
	//	*TokenRequest_TokenAuth
	Credentials isTokenRequest_Credentials `protobuf_oneof:"credentials"`
	// Scopes for the authentication.
	Scopes []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{4}
}

func (x *TokenRequest) GetClient() *TenantClientMessage {
	if x != nil {
		return x.Client
	}
	return nil
}

func (m *TokenRequest) GetCredentials() isTokenRequest_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (x *TokenRequest) GetPasswordAuth() *PasswordAuthMessage {
	if x, ok := x.GetCredentials().(*TokenRequest_PasswordAuth); ok {
		return x.PasswordAuth
	}
	return nil
}

func (x *TokenRequest) GetTokenAuth() *OneTimeTokenAuthMessage {
	if x, ok := x.GetCredentials().(*TokenRequest_TokenAuth); ok {
		return x.TokenAuth
	}
	return nil
}

func (x *TokenRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type isTokenRequest_Credentials interface {
	isTokenRequest_Credentials()
}

type TokenRequest_PasswordAuth struct {
	// Password authentication.
	PasswordAuth *PasswordAuthMessage `protobuf:"bytes,2,opt,name=password_auth,json=passwordAuth,proto3,oneof"`
}

type TokenRequest_TokenAuth struct {
	// One-time token authentication.
	TokenAuth *OneTimeTokenAuthMessage `protobuf:"bytes,3,opt,name=token_auth,json=tokenAuth,proto3,oneof"`
}

func (*TokenRequest_PasswordAuth) isTokenRequest_Credentials() {}

func (*TokenRequest_TokenAuth) isTokenRequest_Credentials() {}

// TokensMessage response for the authentication,
// when authentication is complete, or when the token is refreshed.
type TokensMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access token
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// Refresh token for refreshing the OAuth token
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	// Offline token for the offline usage
	OfflineToken *string `protobuf:"bytes,3,opt,name=offline_token,json=offlineToken,proto3,oneof" json:"offline_token,omitempty"`
}

func (x *TokensMessage) Reset() {
	*x = TokensMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokensMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensMessage) ProtoMessage() {}

func (x *TokensMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensMessage.ProtoReflect.Descriptor instead.
func (*TokensMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{5}
}

func (x *TokensMessage) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokensMessage) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *TokensMessage) GetOfflineToken() string {
	if x != nil && x.OfflineToken != nil {
		return *x.OfflineToken
	}
	return ""
}

type AuthActionRequiredMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session
	Session string `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// Actions to be required. TBD, but should contain JSON.
	Actions []byte `protobuf:"bytes,2,opt,name=actions,proto3" json:"actions,omitempty"`
}

func (x *AuthActionRequiredMessage) Reset() {
	*x = AuthActionRequiredMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthActionRequiredMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthActionRequiredMessage) ProtoMessage() {}

func (x *AuthActionRequiredMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthActionRequiredMessage.ProtoReflect.Descriptor instead.
func (*AuthActionRequiredMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{6}
}

func (x *AuthActionRequiredMessage) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *AuthActionRequiredMessage) GetActions() []byte {
	if x != nil {
		return x.Actions
	}
	return nil
}

// ErrorMessage response for the authentication, when authentication is
// failed.
type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code
	Code int32 `protobuf:"zigzag32,1,opt,name=code,proto3" json:"code,omitempty"`
	// Error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{7}
}

func (x *ErrorMessage) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// LoginResponse response for the authentication
type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*TokenResponse_Tokens
	//	*TokenResponse_ActionRequired
	//	*TokenResponse_Error
	Response isTokenResponse_Response `protobuf_oneof:"response"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{8}
}

func (m *TokenResponse) GetResponse() isTokenResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TokenResponse) GetTokens() *TokensMessage {
	if x, ok := x.GetResponse().(*TokenResponse_Tokens); ok {
		return x.Tokens
	}
	return nil
}

func (x *TokenResponse) GetActionRequired() *AuthActionRequiredMessage {
	if x, ok := x.GetResponse().(*TokenResponse_ActionRequired); ok {
		return x.ActionRequired
	}
	return nil
}

func (x *TokenResponse) GetError() *ErrorMessage {
	if x, ok := x.GetResponse().(*TokenResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isTokenResponse_Response interface {
	isTokenResponse_Response()
}

type TokenResponse_Tokens struct {
	// TokenResponse response for the authentication
	Tokens *TokensMessage `protobuf:"bytes,1,opt,name=tokens,proto3,oneof"`
}

type TokenResponse_ActionRequired struct {
	ActionRequired *AuthActionRequiredMessage `protobuf:"bytes,2,opt,name=action_required,json=actionRequired,proto3,oneof"`
}

type TokenResponse_Error struct {
	// ErrorMessage response for the authentication
	Error *ErrorMessage `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*TokenResponse_Tokens) isTokenResponse_Response() {}

func (*TokenResponse_ActionRequired) isTokenResponse_Response() {}

func (*TokenResponse_Error) isTokenResponse_Response() {}

// TokenRefreshRequest request for the token refresh.
type TokenRefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TenantClientMessage is holds the tenant/client pair.
	Client *TenantClientMessage `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	// RefreshToken JWT token
	RefreshToken string `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *TokenRefreshRequest) Reset() {
	*x = TokenRefreshRequest{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRefreshRequest) ProtoMessage() {}

func (x *TokenRefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRefreshRequest.ProtoReflect.Descriptor instead.
func (*TokenRefreshRequest) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{9}
}

func (x *TokenRefreshRequest) GetClient() *TenantClientMessage {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *TokenRefreshRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

// TokenRefreshResponse response for the token refresh.
type TokenRefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*TokenRefreshResponse_TokenResponse
	//	*TokenRefreshResponse_ErrorResponse
	Response isTokenRefreshResponse_Response `protobuf_oneof:"response"`
}

func (x *TokenRefreshResponse) Reset() {
	*x = TokenRefreshResponse{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRefreshResponse) ProtoMessage() {}

func (x *TokenRefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRefreshResponse.ProtoReflect.Descriptor instead.
func (*TokenRefreshResponse) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{10}
}

func (m *TokenRefreshResponse) GetResponse() isTokenRefreshResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *TokenRefreshResponse) GetTokenResponse() *TokensMessage {
	if x, ok := x.GetResponse().(*TokenRefreshResponse_TokenResponse); ok {
		return x.TokenResponse
	}
	return nil
}

func (x *TokenRefreshResponse) GetErrorResponse() *ErrorMessage {
	if x, ok := x.GetResponse().(*TokenRefreshResponse_ErrorResponse); ok {
		return x.ErrorResponse
	}
	return nil
}

type isTokenRefreshResponse_Response interface {
	isTokenRefreshResponse_Response()
}

type TokenRefreshResponse_TokenResponse struct {
	// TokensMessage response for the token refresh
	TokenResponse *TokensMessage `protobuf:"bytes,1,opt,name=token_response,json=tokenResponse,proto3,oneof"`
}

type TokenRefreshResponse_ErrorResponse struct {
	// ErrorMessage error response for the token refresh
	ErrorResponse *ErrorMessage `protobuf:"bytes,2,opt,name=error_response,json=errorResponse,proto3,oneof"`
}

func (*TokenRefreshResponse_TokenResponse) isTokenRefreshResponse_Response() {}

func (*TokenRefreshResponse_ErrorResponse) isTokenRefreshResponse_Response() {}

// EndSessionRequest request for the EndSession.
type EndSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AllSessions true when the requester wants to destroy all
	// active sessions for the user.
	AllSessions *bool `protobuf:"varint,1,opt,name=all_sessions,json=allSessions,proto3,oneof" json:"all_sessions,omitempty"`
}

func (x *EndSessionRequest) Reset() {
	*x = EndSessionRequest{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionRequest) ProtoMessage() {}

func (x *EndSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionRequest.ProtoReflect.Descriptor instead.
func (*EndSessionRequest) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{11}
}

func (x *EndSessionRequest) GetAllSessions() bool {
	if x != nil && x.AllSessions != nil {
		return *x.AllSessions
	}
	return false
}

// EndSessionSuccessMessage success message for the EndSession request.
type EndSessionSuccessMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DestroyedSessions is the count of the closed sessions.
	DestroyedSessions int32 `protobuf:"varint,1,opt,name=destroyed_sessions,json=destroyedSessions,proto3" json:"destroyed_sessions,omitempty"`
}

func (x *EndSessionSuccessMessage) Reset() {
	*x = EndSessionSuccessMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionSuccessMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionSuccessMessage) ProtoMessage() {}

func (x *EndSessionSuccessMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionSuccessMessage.ProtoReflect.Descriptor instead.
func (*EndSessionSuccessMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{12}
}

func (x *EndSessionSuccessMessage) GetDestroyedSessions() int32 {
	if x != nil {
		return x.DestroyedSessions
	}
	return 0
}

// EndSessionResponse response for the EndSession. When the EndSession is successful,
// the response is empty. When the EndSession is failed, the response contains
// the error code and the error message.
type EndSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*EndSessionResponse_Success
	//	*EndSessionResponse_Error
	Type isEndSessionResponse_Type `protobuf_oneof:"type"`
}

func (x *EndSessionResponse) Reset() {
	*x = EndSessionResponse{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndSessionResponse) ProtoMessage() {}

func (x *EndSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndSessionResponse.ProtoReflect.Descriptor instead.
func (*EndSessionResponse) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{13}
}

func (m *EndSessionResponse) GetType() isEndSessionResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *EndSessionResponse) GetSuccess() *EndSessionSuccessMessage {
	if x, ok := x.GetType().(*EndSessionResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *EndSessionResponse) GetError() *ErrorMessage {
	if x, ok := x.GetType().(*EndSessionResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isEndSessionResponse_Type interface {
	isEndSessionResponse_Type()
}

type EndSessionResponse_Success struct {
	Success *EndSessionSuccessMessage `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type EndSessionResponse_Error struct {
	Error *ErrorMessage `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*EndSessionResponse_Success) isEndSessionResponse_Type() {}

func (*EndSessionResponse_Error) isEndSessionResponse_Type() {}

// ValidateTokenResponse response for the token check.
type ValidateTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AccessToken to be validated
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *ValidateTokenRequest) Reset() {
	*x = ValidateTokenRequest{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenRequest) ProtoMessage() {}

func (x *ValidateTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenRequest.ProtoReflect.Descriptor instead.
func (*ValidateTokenRequest) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{14}
}

func (x *ValidateTokenRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type TokenInfoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssuedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
}

func (x *TokenInfoMessage) Reset() {
	*x = TokenInfoMessage{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfoMessage) ProtoMessage() {}

func (x *TokenInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfoMessage.ProtoReflect.Descriptor instead.
func (*TokenInfoMessage) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{15}
}

func (x *TokenInfoMessage) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

// ValidateTokenResponse response for the token check.
type ValidateTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ValidateTokenResponse_TokenInfo
	//	*ValidateTokenResponse_Error
	Type isValidateTokenResponse_Type `protobuf_oneof:"type"`
}

func (x *ValidateTokenResponse) Reset() {
	*x = ValidateTokenResponse{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTokenResponse) ProtoMessage() {}

func (x *ValidateTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTokenResponse.ProtoReflect.Descriptor instead.
func (*ValidateTokenResponse) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{16}
}

func (m *ValidateTokenResponse) GetType() isValidateTokenResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ValidateTokenResponse) GetTokenInfo() *TokenInfoMessage {
	if x, ok := x.GetType().(*ValidateTokenResponse_TokenInfo); ok {
		return x.TokenInfo
	}
	return nil
}

func (x *ValidateTokenResponse) GetError() *ErrorMessage {
	if x, ok := x.GetType().(*ValidateTokenResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isValidateTokenResponse_Type interface {
	isValidateTokenResponse_Type()
}

type ValidateTokenResponse_TokenInfo struct {
	TokenInfo *TokenInfoMessage `protobuf:"bytes,1,opt,name=token_info,json=tokenInfo,proto3,oneof"`
}

type ValidateTokenResponse_Error struct {
	Error *ErrorMessage `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ValidateTokenResponse_TokenInfo) isValidateTokenResponse_Type() {}

func (*ValidateTokenResponse_Error) isValidateTokenResponse_Type() {}

type RegisterWithCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string  `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Email    *string `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *RegisterWithCredentials) Reset() {
	*x = RegisterWithCredentials{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWithCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWithCredentials) ProtoMessage() {}

func (x *RegisterWithCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWithCredentials.ProtoReflect.Descriptor instead.
func (*RegisterWithCredentials) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterWithCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterWithCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterWithCredentials) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type RegisterWithProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId string  `protobuf:"bytes,1,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	ExternalId string  `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Email      *string `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *RegisterWithProvider) Reset() {
	*x = RegisterWithProvider{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterWithProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWithProvider) ProtoMessage() {}

func (x *RegisterWithProvider) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWithProvider.ProtoReflect.Descriptor instead.
func (*RegisterWithProvider) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterWithProvider) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *RegisterWithProvider) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *RegisterWithProvider) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Method:
	//
	//	*RegisterRequest_Credentials
	//	*RegisterRequest_Provider
	Method isRegisterRequest_Method `protobuf_oneof:"method"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{19}
}

func (m *RegisterRequest) GetMethod() isRegisterRequest_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *RegisterRequest) GetCredentials() *RegisterWithCredentials {
	if x, ok := x.GetMethod().(*RegisterRequest_Credentials); ok {
		return x.Credentials
	}
	return nil
}

func (x *RegisterRequest) GetProvider() *RegisterWithProvider {
	if x, ok := x.GetMethod().(*RegisterRequest_Provider); ok {
		return x.Provider
	}
	return nil
}

type isRegisterRequest_Method interface {
	isRegisterRequest_Method()
}

type RegisterRequest_Credentials struct {
	Credentials *RegisterWithCredentials `protobuf:"bytes,2,opt,name=credentials,proto3,oneof"`
}

type RegisterRequest_Provider struct {
	Provider *RegisterWithProvider `protobuf:"bytes,3,opt,name=provider,proto3,oneof"`
}

func (*RegisterRequest_Credentials) isRegisterRequest_Method() {}

func (*RegisterRequest_Provider) isRegisterRequest_Method() {}

type RegisterSuccessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RequireEmailConfirmation *bool  `protobuf:"varint,2,opt,name=require_email_confirmation,json=requireEmailConfirmation,proto3,oneof" json:"require_email_confirmation,omitempty"`
	RequireActivation        *bool  `protobuf:"varint,3,opt,name=require_activation,json=requireActivation,proto3,oneof" json:"require_activation,omitempty"`
	RequirePayment           *bool  `protobuf:"varint,4,opt,name=require_payment,json=requirePayment,proto3,oneof" json:"require_payment,omitempty"`
}

func (x *RegisterSuccessResponse) Reset() {
	*x = RegisterSuccessResponse{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterSuccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSuccessResponse) ProtoMessage() {}

func (x *RegisterSuccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSuccessResponse.ProtoReflect.Descriptor instead.
func (*RegisterSuccessResponse) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{20}
}

func (x *RegisterSuccessResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RegisterSuccessResponse) GetRequireEmailConfirmation() bool {
	if x != nil && x.RequireEmailConfirmation != nil {
		return *x.RequireEmailConfirmation
	}
	return false
}

func (x *RegisterSuccessResponse) GetRequireActivation() bool {
	if x != nil && x.RequireActivation != nil {
		return *x.RequireActivation
	}
	return false
}

func (x *RegisterSuccessResponse) GetRequirePayment() bool {
	if x != nil && x.RequirePayment != nil {
		return *x.RequirePayment
	}
	return false
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*RegisterResponse_Success
	//	*RegisterResponse_Error
	Ref isRegisterResponse_Ref `protobuf_oneof:"ref"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_ssso_v1_ssso_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP(), []int{21}
}

func (m *RegisterResponse) GetRef() isRegisterResponse_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *RegisterResponse) GetSuccess() *RegisterSuccessResponse {
	if x, ok := x.GetRef().(*RegisterResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *RegisterResponse) GetError() *ErrorMessage {
	if x, ok := x.GetRef().(*RegisterResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isRegisterResponse_Ref interface {
	isRegisterResponse_Ref()
}

type RegisterResponse_Success struct {
	Success *RegisterSuccessResponse `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type RegisterResponse_Error struct {
	Error *ErrorMessage `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*RegisterResponse_Success) isRegisterResponse_Ref() {}

func (*RegisterResponse_Error) isRegisterResponse_Ref() {}

var File_pilab_ssso_v1_ssso_service_proto protoreflect.FileDescriptor

var file_pilab_ssso_v1_ssso_service_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x73, 0x73, 0x73, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x73, 0x73, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x4c, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x2f, 0x0a, 0x17, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4a, 0x0a, 0x13, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x85, 0x02, 0x0a,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a, 0x19, 0x41, 0x75,
	0x74, 0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0c, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x13, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x14, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x49, 0x0a, 0x18, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x01, 0x0a,
	0x12, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4b, 0x0a, 0x10, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x22, 0x96, 0x01,
	0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x7d,
	0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xaa, 0x01,
	0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73,
	0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x41, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x17, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x92,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73,
	0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x05, 0x0a, 0x03,
	0x72, 0x65, 0x66, 0x32, 0xb0, 0x03, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x22, 0x2e, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0a, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x2e, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x73, 0x73, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xbb, 0x01, 0x0a, 0x1b, 0x68, 0x75, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x67, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x73,
	0x73, 0x73, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x53, 0x73, 0x73, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x6f, 0x2e, 0x70,
	0x69, 0x6c, 0x61, 0x62, 0x2e, 0x68, 0x75, 0x2f, 0x67, 0x61, 0x2d, 0x70, 0x69, 0x2f, 0x70, 0x62,
	0x2f, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x73, 0x73, 0x73, 0x6f, 0x2f, 0x70, 0x69, 0x6c, 0x61,
	0x62, 0x2f, 0x73, 0x73, 0x73, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x73, 0x73, 0x6f, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x50, 0x53, 0x58, 0xaa, 0x02, 0x0d, 0x50, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x53,
	0x73, 0x73, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x50, 0x69, 0x6c, 0x61, 0x62, 0x5c, 0x53,
	0x73, 0x73, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x19, 0x50, 0x69, 0x6c, 0x61, 0x62, 0x5c, 0x53,
	0x73, 0x73, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0f, 0x50, 0x69, 0x6c, 0x61, 0x62, 0x3a, 0x3a, 0x53, 0x73, 0x73, 0x6f,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pilab_ssso_v1_ssso_service_proto_rawDescOnce sync.Once
	file_pilab_ssso_v1_ssso_service_proto_rawDescData = file_pilab_ssso_v1_ssso_service_proto_rawDesc
)

func file_pilab_ssso_v1_ssso_service_proto_rawDescGZIP() []byte {
	file_pilab_ssso_v1_ssso_service_proto_rawDescOnce.Do(func() {
		file_pilab_ssso_v1_ssso_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pilab_ssso_v1_ssso_service_proto_rawDescData)
	})
	return file_pilab_ssso_v1_ssso_service_proto_rawDescData
}

var file_pilab_ssso_v1_ssso_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_pilab_ssso_v1_ssso_service_proto_goTypes = []any{
	(*PasswordAuthMessage)(nil),       // 0: pilab.ssso.v1.PasswordAuthMessage
	(*CodeAuthMessage)(nil),           // 1: pilab.ssso.v1.CodeAuthMessage
	(*OneTimeTokenAuthMessage)(nil),   // 2: pilab.ssso.v1.OneTimeTokenAuthMessage
	(*TenantClientMessage)(nil),       // 3: pilab.ssso.v1.TenantClientMessage
	(*TokenRequest)(nil),              // 4: pilab.ssso.v1.TokenRequest
	(*TokensMessage)(nil),             // 5: pilab.ssso.v1.TokensMessage
	(*AuthActionRequiredMessage)(nil), // 6: pilab.ssso.v1.AuthActionRequiredMessage
	(*ErrorMessage)(nil),              // 7: pilab.ssso.v1.ErrorMessage
	(*TokenResponse)(nil),             // 8: pilab.ssso.v1.TokenResponse
	(*TokenRefreshRequest)(nil),       // 9: pilab.ssso.v1.TokenRefreshRequest
	(*TokenRefreshResponse)(nil),      // 10: pilab.ssso.v1.TokenRefreshResponse
	(*EndSessionRequest)(nil),         // 11: pilab.ssso.v1.EndSessionRequest
	(*EndSessionSuccessMessage)(nil),  // 12: pilab.ssso.v1.EndSessionSuccessMessage
	(*EndSessionResponse)(nil),        // 13: pilab.ssso.v1.EndSessionResponse
	(*ValidateTokenRequest)(nil),      // 14: pilab.ssso.v1.ValidateTokenRequest
	(*TokenInfoMessage)(nil),          // 15: pilab.ssso.v1.TokenInfoMessage
	(*ValidateTokenResponse)(nil),     // 16: pilab.ssso.v1.ValidateTokenResponse
	(*RegisterWithCredentials)(nil),   // 17: pilab.ssso.v1.RegisterWithCredentials
	(*RegisterWithProvider)(nil),      // 18: pilab.ssso.v1.RegisterWithProvider
	(*RegisterRequest)(nil),           // 19: pilab.ssso.v1.RegisterRequest
	(*RegisterSuccessResponse)(nil),   // 20: pilab.ssso.v1.RegisterSuccessResponse
	(*RegisterResponse)(nil),          // 21: pilab.ssso.v1.RegisterResponse
	(*timestamppb.Timestamp)(nil),     // 22: google.protobuf.Timestamp
}
var file_pilab_ssso_v1_ssso_service_proto_depIdxs = []int32{
	3,  // 0: pilab.ssso.v1.TokenRequest.client:type_name -> pilab.ssso.v1.TenantClientMessage
	0,  // 1: pilab.ssso.v1.TokenRequest.password_auth:type_name -> pilab.ssso.v1.PasswordAuthMessage
	2,  // 2: pilab.ssso.v1.TokenRequest.token_auth:type_name -> pilab.ssso.v1.OneTimeTokenAuthMessage
	5,  // 3: pilab.ssso.v1.TokenResponse.tokens:type_name -> pilab.ssso.v1.TokensMessage
	6,  // 4: pilab.ssso.v1.TokenResponse.action_required:type_name -> pilab.ssso.v1.AuthActionRequiredMessage
	7,  // 5: pilab.ssso.v1.TokenResponse.error:type_name -> pilab.ssso.v1.ErrorMessage
	3,  // 6: pilab.ssso.v1.TokenRefreshRequest.client:type_name -> pilab.ssso.v1.TenantClientMessage
	5,  // 7: pilab.ssso.v1.TokenRefreshResponse.token_response:type_name -> pilab.ssso.v1.TokensMessage
	7,  // 8: pilab.ssso.v1.TokenRefreshResponse.error_response:type_name -> pilab.ssso.v1.ErrorMessage
	12, // 9: pilab.ssso.v1.EndSessionResponse.success:type_name -> pilab.ssso.v1.EndSessionSuccessMessage
	7,  // 10: pilab.ssso.v1.EndSessionResponse.error:type_name -> pilab.ssso.v1.ErrorMessage
	22, // 11: pilab.ssso.v1.TokenInfoMessage.issued_at:type_name -> google.protobuf.Timestamp
	15, // 12: pilab.ssso.v1.ValidateTokenResponse.token_info:type_name -> pilab.ssso.v1.TokenInfoMessage
	7,  // 13: pilab.ssso.v1.ValidateTokenResponse.error:type_name -> pilab.ssso.v1.ErrorMessage
	17, // 14: pilab.ssso.v1.RegisterRequest.credentials:type_name -> pilab.ssso.v1.RegisterWithCredentials
	18, // 15: pilab.ssso.v1.RegisterRequest.provider:type_name -> pilab.ssso.v1.RegisterWithProvider
	20, // 16: pilab.ssso.v1.RegisterResponse.success:type_name -> pilab.ssso.v1.RegisterSuccessResponse
	7,  // 17: pilab.ssso.v1.RegisterResponse.error:type_name -> pilab.ssso.v1.ErrorMessage
	4,  // 18: pilab.ssso.v1.AuthService.Token:input_type -> pilab.ssso.v1.TokenRequest
	9,  // 19: pilab.ssso.v1.AuthService.TokenRefresh:input_type -> pilab.ssso.v1.TokenRefreshRequest
	11, // 20: pilab.ssso.v1.AuthService.EndSession:input_type -> pilab.ssso.v1.EndSessionRequest
	14, // 21: pilab.ssso.v1.AuthService.ValidateToken:input_type -> pilab.ssso.v1.ValidateTokenRequest
	19, // 22: pilab.ssso.v1.AuthService.Register:input_type -> pilab.ssso.v1.RegisterRequest
	8,  // 23: pilab.ssso.v1.AuthService.Token:output_type -> pilab.ssso.v1.TokenResponse
	10, // 24: pilab.ssso.v1.AuthService.TokenRefresh:output_type -> pilab.ssso.v1.TokenRefreshResponse
	13, // 25: pilab.ssso.v1.AuthService.EndSession:output_type -> pilab.ssso.v1.EndSessionResponse
	16, // 26: pilab.ssso.v1.AuthService.ValidateToken:output_type -> pilab.ssso.v1.ValidateTokenResponse
	21, // 27: pilab.ssso.v1.AuthService.Register:output_type -> pilab.ssso.v1.RegisterResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_pilab_ssso_v1_ssso_service_proto_init() }
func file_pilab_ssso_v1_ssso_service_proto_init() {
	if File_pilab_ssso_v1_ssso_service_proto != nil {
		return
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[4].OneofWrappers = []any{
		(*TokenRequest_PasswordAuth)(nil),
		(*TokenRequest_TokenAuth)(nil),
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[8].OneofWrappers = []any{
		(*TokenResponse_Tokens)(nil),
		(*TokenResponse_ActionRequired)(nil),
		(*TokenResponse_Error)(nil),
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[10].OneofWrappers = []any{
		(*TokenRefreshResponse_TokenResponse)(nil),
		(*TokenRefreshResponse_ErrorResponse)(nil),
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[13].OneofWrappers = []any{
		(*EndSessionResponse_Success)(nil),
		(*EndSessionResponse_Error)(nil),
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[16].OneofWrappers = []any{
		(*ValidateTokenResponse_TokenInfo)(nil),
		(*ValidateTokenResponse_Error)(nil),
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[17].OneofWrappers = []any{}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[18].OneofWrappers = []any{}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[19].OneofWrappers = []any{
		(*RegisterRequest_Credentials)(nil),
		(*RegisterRequest_Provider)(nil),
	}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[20].OneofWrappers = []any{}
	file_pilab_ssso_v1_ssso_service_proto_msgTypes[21].OneofWrappers = []any{
		(*RegisterResponse_Success)(nil),
		(*RegisterResponse_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pilab_ssso_v1_ssso_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_ssso_v1_ssso_service_proto_goTypes,
		DependencyIndexes: file_pilab_ssso_v1_ssso_service_proto_depIdxs,
		MessageInfos:      file_pilab_ssso_v1_ssso_service_proto_msgTypes,
	}.Build()
	File_pilab_ssso_v1_ssso_service_proto = out.File
	file_pilab_ssso_v1_ssso_service_proto_rawDesc = nil
	file_pilab_ssso_v1_ssso_service_proto_goTypes = nil
	file_pilab_ssso_v1_ssso_service_proto_depIdxs = nil
}
