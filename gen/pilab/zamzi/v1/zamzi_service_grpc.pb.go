// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pilab/zamzi/v1/zamzi_service.proto

package zamziv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ZamziService_Game_FullMethodName = "/pilab.zamzi.v1.ZamziService/Game"
)

// ZamziServiceClient is the client API for ZamziService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ZamziService is the service that provides the game service.
type ZamziServiceClient interface {
	Game(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameRequests, GameResponses], error)
}

type zamziServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZamziServiceClient(cc grpc.ClientConnInterface) ZamziServiceClient {
	return &zamziServiceClient{cc}
}

func (c *zamziServiceClient) Game(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameRequests, GameResponses], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ZamziService_ServiceDesc.Streams[0], ZamziService_Game_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GameRequests, GameResponses]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZamziService_GameClient = grpc.BidiStreamingClient[GameRequests, GameResponses]

// ZamziServiceServer is the server API for ZamziService service.
// All implementations should embed UnimplementedZamziServiceServer
// for forward compatibility.
//
// ZamziService is the service that provides the game service.
type ZamziServiceServer interface {
	Game(grpc.BidiStreamingServer[GameRequests, GameResponses]) error
}

// UnimplementedZamziServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZamziServiceServer struct{}

func (UnimplementedZamziServiceServer) Game(grpc.BidiStreamingServer[GameRequests, GameResponses]) error {
	return status.Errorf(codes.Unimplemented, "method Game not implemented")
}
func (UnimplementedZamziServiceServer) testEmbeddedByValue() {}

// UnsafeZamziServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZamziServiceServer will
// result in compilation errors.
type UnsafeZamziServiceServer interface {
	mustEmbedUnimplementedZamziServiceServer()
}

func RegisterZamziServiceServer(s grpc.ServiceRegistrar, srv ZamziServiceServer) {
	// If the following call pancis, it indicates UnimplementedZamziServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ZamziService_ServiceDesc, srv)
}

func _ZamziService_Game_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ZamziServiceServer).Game(&grpc.GenericServerStream[GameRequests, GameResponses]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ZamziService_GameServer = grpc.BidiStreamingServer[GameRequests, GameResponses]

// ZamziService_ServiceDesc is the grpc.ServiceDesc for ZamziService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZamziService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilab.zamzi.v1.ZamziService",
	HandlerType: (*ZamziServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Game",
			Handler:       _ZamziService_Game_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pilab/zamzi/v1/zamzi_service.proto",
}
