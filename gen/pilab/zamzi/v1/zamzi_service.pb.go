// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: pilab/zamzi/v1/zamzi_service.proto

package zamziv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Role int32

const (
	Role_PLAYER Role = 0
	Role_HOST   Role = 1
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "PLAYER",
		1: "HOST",
	}
	Role_value = map[string]int32{
		"PLAYER": 0,
		"HOST":   1,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_pilab_zamzi_v1_zamzi_service_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_pilab_zamzi_v1_zamzi_service_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{0}
}

// JoinRoom is the request message for joining a room.
type JoinRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin      string  `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	UserId   string  `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname string  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Password *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Role     Role    `protobuf:"varint,5,opt,name=role,proto3,enum=pilab.zamzi.v1.Role" json:"role,omitempty"`
}

func (x *JoinRoom) Reset() {
	*x = JoinRoom{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoom) ProtoMessage() {}

func (x *JoinRoom) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoom.ProtoReflect.Descriptor instead.
func (*JoinRoom) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{0}
}

func (x *JoinRoom) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *JoinRoom) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JoinRoom) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *JoinRoom) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *JoinRoom) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_PLAYER
}

// Answer is the request message for answering a question.
type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer string `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{1}
}

func (x *Answer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// GameRequests is the request message for the game service.
type GameRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*GameRequests_JoinRoom
	Request isGameRequests_Request `protobuf_oneof:"request"`
}

func (x *GameRequests) Reset() {
	*x = GameRequests{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRequests) ProtoMessage() {}

func (x *GameRequests) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRequests.ProtoReflect.Descriptor instead.
func (*GameRequests) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{2}
}

func (m *GameRequests) GetRequest() isGameRequests_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *GameRequests) GetJoinRoom() *JoinRoom {
	if x, ok := x.GetRequest().(*GameRequests_JoinRoom); ok {
		return x.JoinRoom
	}
	return nil
}

type isGameRequests_Request interface {
	isGameRequests_Request()
}

type GameRequests_JoinRoom struct {
	JoinRoom *JoinRoom `protobuf:"bytes,1,opt,name=join_room,json=joinRoom,proto3,oneof"`
}

func (*GameRequests_JoinRoom) isGameRequests_Request() {}

// Room is the message for a room.
type Room struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin             string  `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	QuizId          string  `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Topic           string  `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Difficulty      string  `protobuf:"bytes,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Open            bool    `protobuf:"varint,5,opt,name=open,proto3" json:"open,omitempty"`
	Users           []*User `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
	Password        *string `protobuf:"bytes,7,opt,name=password,proto3,oneof" json:"password,omitempty"`
	HostUserId      string  `protobuf:"bytes,8,opt,name=host_user_id,json=hostUserId,proto3" json:"host_user_id,omitempty"`
	CurrentQuestion uint32  `protobuf:"varint,9,opt,name=current_question,json=currentQuestion,proto3" json:"current_question,omitempty"`
	TotalQuestions  uint32  `protobuf:"varint,10,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
}

func (x *Room) Reset() {
	*x = Room{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Room) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Room) ProtoMessage() {}

func (x *Room) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Room.ProtoReflect.Descriptor instead.
func (*Room) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{3}
}

func (x *Room) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *Room) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *Room) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Room) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *Room) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *Room) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Room) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *Room) GetHostUserId() string {
	if x != nil {
		return x.HostUserId
	}
	return ""
}

func (x *Room) GetCurrentQuestion() uint32 {
	if x != nil {
		return x.CurrentQuestion
	}
	return 0
}

func (x *Room) GetTotalQuestions() uint32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

// User is the message for a user.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Score    uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Streak   uint32 `protobuf:"varint,4,opt,name=streak,proto3" json:"streak,omitempty"`
	Rank     uint32 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{4}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *User) GetStreak() uint32 {
	if x != nil {
		return x.Streak
	}
	return 0
}

func (x *User) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

// LobbyMessage is the message for the lobby.
type LobbyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic      string  `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Difficulty string  `protobuf:"bytes,2,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Open       bool    `protobuf:"varint,3,opt,name=open,proto3" json:"open,omitempty"`
	Pin        string  `protobuf:"bytes,4,opt,name=pin,proto3" json:"pin,omitempty"`
	Users      []*User `protobuf:"bytes,5,rep,name=users,proto3" json:"users,omitempty"`
	Password   *string `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (x *LobbyMessage) Reset() {
	*x = LobbyMessage{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LobbyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LobbyMessage) ProtoMessage() {}

func (x *LobbyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LobbyMessage.ProtoReflect.Descriptor instead.
func (*LobbyMessage) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{5}
}

func (x *LobbyMessage) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *LobbyMessage) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *LobbyMessage) GetOpen() bool {
	if x != nil {
		return x.Open
	}
	return false
}

func (x *LobbyMessage) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *LobbyMessage) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *LobbyMessage) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

// ResultMessage is the message for the result of a question.
type ResultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectAnswer string `protobuf:"bytes,1,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"`
	IsCorrect     bool   `protobuf:"varint,2,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	Score         uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Streak        uint32 `protobuf:"varint,4,opt,name=streak,proto3" json:"streak,omitempty"`
	Rank          uint32 `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	// Answer time in seconds
	AnswerTime uint32 `protobuf:"varint,6,opt,name=answer_time,json=answerTime,proto3" json:"answer_time,omitempty"`
}

func (x *ResultMessage) Reset() {
	*x = ResultMessage{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultMessage) ProtoMessage() {}

func (x *ResultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultMessage.ProtoReflect.Descriptor instead.
func (*ResultMessage) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{6}
}

func (x *ResultMessage) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *ResultMessage) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *ResultMessage) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ResultMessage) GetStreak() uint32 {
	if x != nil {
		return x.Streak
	}
	return 0
}

func (x *ResultMessage) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ResultMessage) GetAnswerTime() uint32 {
	if x != nil {
		return x.AnswerTime
	}
	return 0
}

// TriviaMessage is the message for a trivia question.
type TriviaMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question       string   `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Type           string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Choices        []string `protobuf:"bytes,3,rep,name=choices,proto3" json:"choices,omitempty"`
	TimeLimit      uint32   `protobuf:"varint,4,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	QuestionNumber uint32   `protobuf:"varint,5,opt,name=question_number,json=questionNumber,proto3" json:"question_number,omitempty"`
	TotalQuestions uint32   `protobuf:"varint,6,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	Streak         uint32   `protobuf:"varint,7,opt,name=streak,proto3" json:"streak,omitempty"`
	Score          uint32   `protobuf:"varint,8,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *TriviaMessage) Reset() {
	*x = TriviaMessage{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriviaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriviaMessage) ProtoMessage() {}

func (x *TriviaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriviaMessage.ProtoReflect.Descriptor instead.
func (*TriviaMessage) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{7}
}

func (x *TriviaMessage) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *TriviaMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TriviaMessage) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *TriviaMessage) GetTimeLimit() uint32 {
	if x != nil {
		return x.TimeLimit
	}
	return 0
}

func (x *TriviaMessage) GetQuestionNumber() uint32 {
	if x != nil {
		return x.QuestionNumber
	}
	return 0
}

func (x *TriviaMessage) GetTotalQuestions() uint32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *TriviaMessage) GetStreak() uint32 {
	if x != nil {
		return x.Streak
	}
	return 0
}

func (x *TriviaMessage) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// ScoreboardMessage is the message for the scoreboard.
type ScoreboardMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *ScoreboardMessage) Reset() {
	*x = ScoreboardMessage{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScoreboardMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScoreboardMessage) ProtoMessage() {}

func (x *ScoreboardMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScoreboardMessage.ProtoReflect.Descriptor instead.
func (*ScoreboardMessage) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{8}
}

func (x *ScoreboardMessage) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// RoomUpdate is the message for updating a room.
type RoomUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin   string  `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Users []*User `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *RoomUpdate) Reset() {
	*x = RoomUpdate{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomUpdate) ProtoMessage() {}

func (x *RoomUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomUpdate.ProtoReflect.Descriptor instead.
func (*RoomUpdate) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{9}
}

func (x *RoomUpdate) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

func (x *RoomUpdate) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// GameResponses is the response message for the game service.
type GameResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*GameResponses_Lobby
	//	*GameResponses_Trivia
	//	*GameResponses_Result
	//	*GameResponses_Scoreboard
	//	*GameResponses_RoomUpdate
	Response isGameResponses_Response `protobuf_oneof:"response"`
}

func (x *GameResponses) Reset() {
	*x = GameResponses{}
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResponses) ProtoMessage() {}

func (x *GameResponses) ProtoReflect() protoreflect.Message {
	mi := &file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResponses.ProtoReflect.Descriptor instead.
func (*GameResponses) Descriptor() ([]byte, []int) {
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP(), []int{10}
}

func (m *GameResponses) GetResponse() isGameResponses_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GameResponses) GetLobby() *LobbyMessage {
	if x, ok := x.GetResponse().(*GameResponses_Lobby); ok {
		return x.Lobby
	}
	return nil
}

func (x *GameResponses) GetTrivia() *TriviaMessage {
	if x, ok := x.GetResponse().(*GameResponses_Trivia); ok {
		return x.Trivia
	}
	return nil
}

func (x *GameResponses) GetResult() *ResultMessage {
	if x, ok := x.GetResponse().(*GameResponses_Result); ok {
		return x.Result
	}
	return nil
}

func (x *GameResponses) GetScoreboard() *ScoreboardMessage {
	if x, ok := x.GetResponse().(*GameResponses_Scoreboard); ok {
		return x.Scoreboard
	}
	return nil
}

func (x *GameResponses) GetRoomUpdate() *RoomUpdate {
	if x, ok := x.GetResponse().(*GameResponses_RoomUpdate); ok {
		return x.RoomUpdate
	}
	return nil
}

type isGameResponses_Response interface {
	isGameResponses_Response()
}

type GameResponses_Lobby struct {
	Lobby *LobbyMessage `protobuf:"bytes,1,opt,name=lobby,proto3,oneof"`
}

type GameResponses_Trivia struct {
	Trivia *TriviaMessage `protobuf:"bytes,2,opt,name=trivia,proto3,oneof"`
}

type GameResponses_Result struct {
	Result *ResultMessage `protobuf:"bytes,3,opt,name=result,proto3,oneof"`
}

type GameResponses_Scoreboard struct {
	Scoreboard *ScoreboardMessage `protobuf:"bytes,4,opt,name=scoreboard,proto3,oneof"`
}

type GameResponses_RoomUpdate struct {
	RoomUpdate *RoomUpdate `protobuf:"bytes,5,opt,name=room_update,json=roomUpdate,proto3,oneof"`
}

func (*GameResponses_Lobby) isGameResponses_Response() {}

func (*GameResponses_Trivia) isGameResponses_Response() {}

func (*GameResponses_Result) isGameResponses_Response() {}

func (*GameResponses_Scoreboard) isGameResponses_Response() {}

func (*GameResponses_RoomUpdate) isGameResponses_Response() {}

var File_pilab_zamzi_v1_zamzi_service_proto protoreflect.FileDescriptor

var file_pilab_zamzi_v1_zamzi_service_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2f, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a,
	0x69, 0x2e, 0x76, 0x31, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e,
	0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x20, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x22, 0x52, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61,
	0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x48,
	0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcb, 0x02, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x7d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x22, 0xc4, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x3f, 0x0a, 0x11, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d,
	0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x4a, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xc7, 0x02,
	0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x6c, 0x6f, 0x62, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x62, 0x62, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x6c, 0x6f, 0x62, 0x62, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61,
	0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x76, 0x69, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x74, 0x72, 0x69, 0x76, 0x69, 0x61, 0x12, 0x37,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x0b,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x1c, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x4f, 0x53, 0x54, 0x10, 0x01, 0x32, 0x59, 0x0a, 0x0c, 0x5a, 0x61, 0x6d, 0x7a, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e,
	0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x1d, 0x2e, 0x70, 0x69,
	0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0xb8, 0x01, 0x0a, 0x1c, 0x68, 0x75, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x67, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62, 0x2e, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x76,
	0x31, 0x42, 0x11, 0x5a, 0x61, 0x6d, 0x7a, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x6f, 0x2e, 0x70, 0x69, 0x6c, 0x61, 0x62,
	0x2e, 0x68, 0x75, 0x2f, 0x67, 0x61, 0x2d, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x69, 0x6c,
	0x61, 0x62, 0x2f, 0x7a, 0x61, 0x6d, 0x7a, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x7a, 0x61, 0x6d, 0x7a,
	0x69, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x5a, 0x58, 0xaa, 0x02, 0x0e, 0x50, 0x69, 0x6c, 0x61,
	0x62, 0x2e, 0x5a, 0x61, 0x6d, 0x7a, 0x69, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x50, 0x69, 0x6c,
	0x61, 0x62, 0x5c, 0x5a, 0x61, 0x6d, 0x7a, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x50, 0x69,
	0x6c, 0x61, 0x62, 0x5c, 0x5a, 0x61, 0x6d, 0x7a, 0x69, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x50, 0x69, 0x6c, 0x61, 0x62,
	0x3a, 0x3a, 0x5a, 0x61, 0x6d, 0x7a, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pilab_zamzi_v1_zamzi_service_proto_rawDescOnce sync.Once
	file_pilab_zamzi_v1_zamzi_service_proto_rawDescData = file_pilab_zamzi_v1_zamzi_service_proto_rawDesc
)

func file_pilab_zamzi_v1_zamzi_service_proto_rawDescGZIP() []byte {
	file_pilab_zamzi_v1_zamzi_service_proto_rawDescOnce.Do(func() {
		file_pilab_zamzi_v1_zamzi_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pilab_zamzi_v1_zamzi_service_proto_rawDescData)
	})
	return file_pilab_zamzi_v1_zamzi_service_proto_rawDescData
}

var file_pilab_zamzi_v1_zamzi_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pilab_zamzi_v1_zamzi_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pilab_zamzi_v1_zamzi_service_proto_goTypes = []any{
	(Role)(0),                 // 0: pilab.zamzi.v1.Role
	(*JoinRoom)(nil),          // 1: pilab.zamzi.v1.JoinRoom
	(*Answer)(nil),            // 2: pilab.zamzi.v1.Answer
	(*GameRequests)(nil),      // 3: pilab.zamzi.v1.GameRequests
	(*Room)(nil),              // 4: pilab.zamzi.v1.Room
	(*User)(nil),              // 5: pilab.zamzi.v1.User
	(*LobbyMessage)(nil),      // 6: pilab.zamzi.v1.LobbyMessage
	(*ResultMessage)(nil),     // 7: pilab.zamzi.v1.ResultMessage
	(*TriviaMessage)(nil),     // 8: pilab.zamzi.v1.TriviaMessage
	(*ScoreboardMessage)(nil), // 9: pilab.zamzi.v1.ScoreboardMessage
	(*RoomUpdate)(nil),        // 10: pilab.zamzi.v1.RoomUpdate
	(*GameResponses)(nil),     // 11: pilab.zamzi.v1.GameResponses
}
var file_pilab_zamzi_v1_zamzi_service_proto_depIdxs = []int32{
	0,  // 0: pilab.zamzi.v1.JoinRoom.role:type_name -> pilab.zamzi.v1.Role
	1,  // 1: pilab.zamzi.v1.GameRequests.join_room:type_name -> pilab.zamzi.v1.JoinRoom
	5,  // 2: pilab.zamzi.v1.Room.users:type_name -> pilab.zamzi.v1.User
	5,  // 3: pilab.zamzi.v1.LobbyMessage.users:type_name -> pilab.zamzi.v1.User
	5,  // 4: pilab.zamzi.v1.ScoreboardMessage.users:type_name -> pilab.zamzi.v1.User
	5,  // 5: pilab.zamzi.v1.RoomUpdate.users:type_name -> pilab.zamzi.v1.User
	6,  // 6: pilab.zamzi.v1.GameResponses.lobby:type_name -> pilab.zamzi.v1.LobbyMessage
	8,  // 7: pilab.zamzi.v1.GameResponses.trivia:type_name -> pilab.zamzi.v1.TriviaMessage
	7,  // 8: pilab.zamzi.v1.GameResponses.result:type_name -> pilab.zamzi.v1.ResultMessage
	9,  // 9: pilab.zamzi.v1.GameResponses.scoreboard:type_name -> pilab.zamzi.v1.ScoreboardMessage
	10, // 10: pilab.zamzi.v1.GameResponses.room_update:type_name -> pilab.zamzi.v1.RoomUpdate
	3,  // 11: pilab.zamzi.v1.ZamziService.Game:input_type -> pilab.zamzi.v1.GameRequests
	11, // 12: pilab.zamzi.v1.ZamziService.Game:output_type -> pilab.zamzi.v1.GameResponses
	12, // [12:13] is the sub-list for method output_type
	11, // [11:12] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_pilab_zamzi_v1_zamzi_service_proto_init() }
func file_pilab_zamzi_v1_zamzi_service_proto_init() {
	if File_pilab_zamzi_v1_zamzi_service_proto != nil {
		return
	}
	file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[2].OneofWrappers = []any{
		(*GameRequests_JoinRoom)(nil),
	}
	file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[3].OneofWrappers = []any{}
	file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_pilab_zamzi_v1_zamzi_service_proto_msgTypes[10].OneofWrappers = []any{
		(*GameResponses_Lobby)(nil),
		(*GameResponses_Trivia)(nil),
		(*GameResponses_Result)(nil),
		(*GameResponses_Scoreboard)(nil),
		(*GameResponses_RoomUpdate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pilab_zamzi_v1_zamzi_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pilab_zamzi_v1_zamzi_service_proto_goTypes,
		DependencyIndexes: file_pilab_zamzi_v1_zamzi_service_proto_depIdxs,
		EnumInfos:         file_pilab_zamzi_v1_zamzi_service_proto_enumTypes,
		MessageInfos:      file_pilab_zamzi_v1_zamzi_service_proto_msgTypes,
	}.Build()
	File_pilab_zamzi_v1_zamzi_service_proto = out.File
	file_pilab_zamzi_v1_zamzi_service_proto_rawDesc = nil
	file_pilab_zamzi_v1_zamzi_service_proto_goTypes = nil
	file_pilab_zamzi_v1_zamzi_service_proto_depIdxs = nil
}
