// Code generated by MockGen. DO NOT EDIT.
// Source: gen/pilab/ssso/v1/ssso_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=gen/pilab/ssso/v1/ssso_service_grpc.pb.go -destination=mocks/ssso_service_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	sssov1 "go.pilab.hu/pilab-cloud/ga-pi/gen/pilab/ssso/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// EndSession mocks base method.
func (m *MockAuthServiceClient) EndSession(ctx context.Context, in *sssov1.EndSessionRequest, opts ...grpc.CallOption) (*sssov1.EndSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndSession", varargs...)
	ret0, _ := ret[0].(*sssov1.EndSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndSession indicates an expected call of EndSession.
func (mr *MockAuthServiceClientMockRecorder) EndSession(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockAuthServiceClient)(nil).EndSession), varargs...)
}

// Register mocks base method.
func (m *MockAuthServiceClient) Register(ctx context.Context, in *sssov1.RegisterRequest, opts ...grpc.CallOption) (*sssov1.RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*sssov1.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceClientMockRecorder) Register(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceClient)(nil).Register), varargs...)
}

// Token mocks base method.
func (m *MockAuthServiceClient) Token(ctx context.Context, in *sssov1.TokenRequest, opts ...grpc.CallOption) (*sssov1.TokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Token", varargs...)
	ret0, _ := ret[0].(*sssov1.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockAuthServiceClientMockRecorder) Token(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAuthServiceClient)(nil).Token), varargs...)
}

// TokenRefresh mocks base method.
func (m *MockAuthServiceClient) TokenRefresh(ctx context.Context, in *sssov1.TokenRefreshRequest, opts ...grpc.CallOption) (*sssov1.TokenRefreshResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenRefresh", varargs...)
	ret0, _ := ret[0].(*sssov1.TokenRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefresh indicates an expected call of TokenRefresh.
func (mr *MockAuthServiceClientMockRecorder) TokenRefresh(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefresh", reflect.TypeOf((*MockAuthServiceClient)(nil).TokenRefresh), varargs...)
}

// ValidateToken mocks base method.
func (m *MockAuthServiceClient) ValidateToken(ctx context.Context, in *sssov1.ValidateTokenRequest, opts ...grpc.CallOption) (*sssov1.ValidateTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateToken", varargs...)
	ret0, _ := ret[0].(*sssov1.ValidateTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceClientMockRecorder) ValidateToken(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthServiceClient)(nil).ValidateToken), varargs...)
}

// MockAuthServiceServer is a mock of AuthServiceServer interface.
type MockAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceServerMockRecorder
}

// MockAuthServiceServerMockRecorder is the mock recorder for MockAuthServiceServer.
type MockAuthServiceServerMockRecorder struct {
	mock *MockAuthServiceServer
}

// NewMockAuthServiceServer creates a new mock instance.
func NewMockAuthServiceServer(ctrl *gomock.Controller) *MockAuthServiceServer {
	mock := &MockAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceServer) EXPECT() *MockAuthServiceServerMockRecorder {
	return m.recorder
}

// EndSession mocks base method.
func (m *MockAuthServiceServer) EndSession(arg0 context.Context, arg1 *sssov1.EndSessionRequest) (*sssov1.EndSessionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession", arg0, arg1)
	ret0, _ := ret[0].(*sssov1.EndSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndSession indicates an expected call of EndSession.
func (mr *MockAuthServiceServerMockRecorder) EndSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockAuthServiceServer)(nil).EndSession), arg0, arg1)
}

// Register mocks base method.
func (m *MockAuthServiceServer) Register(arg0 context.Context, arg1 *sssov1.RegisterRequest) (*sssov1.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*sssov1.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthServiceServerMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthServiceServer)(nil).Register), arg0, arg1)
}

// Token mocks base method.
func (m *MockAuthServiceServer) Token(arg0 context.Context, arg1 *sssov1.TokenRequest) (*sssov1.TokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0, arg1)
	ret0, _ := ret[0].(*sssov1.TokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockAuthServiceServerMockRecorder) Token(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAuthServiceServer)(nil).Token), arg0, arg1)
}

// TokenRefresh mocks base method.
func (m *MockAuthServiceServer) TokenRefresh(arg0 context.Context, arg1 *sssov1.TokenRefreshRequest) (*sssov1.TokenRefreshResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenRefresh", arg0, arg1)
	ret0, _ := ret[0].(*sssov1.TokenRefreshResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefresh indicates an expected call of TokenRefresh.
func (mr *MockAuthServiceServerMockRecorder) TokenRefresh(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefresh", reflect.TypeOf((*MockAuthServiceServer)(nil).TokenRefresh), arg0, arg1)
}

// ValidateToken mocks base method.
func (m *MockAuthServiceServer) ValidateToken(arg0 context.Context, arg1 *sssov1.ValidateTokenRequest) (*sssov1.ValidateTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0, arg1)
	ret0, _ := ret[0].(*sssov1.ValidateTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthServiceServerMockRecorder) ValidateToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuthServiceServer)(nil).ValidateToken), arg0, arg1)
}

// MockUnsafeAuthServiceServer is a mock of UnsafeAuthServiceServer interface.
type MockUnsafeAuthServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServiceServerMockRecorder
}

// MockUnsafeAuthServiceServerMockRecorder is the mock recorder for MockUnsafeAuthServiceServer.
type MockUnsafeAuthServiceServerMockRecorder struct {
	mock *MockUnsafeAuthServiceServer
}

// NewMockUnsafeAuthServiceServer creates a new mock instance.
func NewMockUnsafeAuthServiceServer(ctrl *gomock.Controller) *MockUnsafeAuthServiceServer {
	mock := &MockUnsafeAuthServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServiceServer) EXPECT() *MockUnsafeAuthServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServiceServer mocks base method.
func (m *MockUnsafeAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServiceServer")
}

// mustEmbedUnimplementedAuthServiceServer indicates an expected call of mustEmbedUnimplementedAuthServiceServer.
func (mr *MockUnsafeAuthServiceServerMockRecorder) mustEmbedUnimplementedAuthServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServiceServer", reflect.TypeOf((*MockUnsafeAuthServiceServer)(nil).mustEmbedUnimplementedAuthServiceServer))
}
